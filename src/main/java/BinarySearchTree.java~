public class BinarySearchTree<T extends Comparable<T>> {
    private String logf(Object... os){
        StringBuilder b = new StringBuilder();
        for(Object o : os){
            if(o == null){
                b.append("null");
            }
            else{
                b.append(o.toString());
            }
            b.append(" ");
        }
	return b.toString();
    }
    private void log(Object... os){
	System.out.println(logf(os));
    }
    public Node root;

    public int size(){
	if(root == null){
	    return 0;
	}
	else{
	    return root.size(0);
	}
    }

    public void apply(Visitor visitor){
	if(root == null){
	    return;
	}
	else{
	    root.accept(visitor);
	}
    }

    public void insert(T datum) {
        if(root == null){
            root = new Node(datum);
        }
        else{
            root.insert(datum);
        }
    }

    public boolean contains(T datum){
        if(root == null){
            return false;
        }
        return root.contains(datum);
    }

    public String toString(){
	return logf(root);
    }

    public abstract class Visitor<T>{
	public abstract T getResult();
	public abstract void visit(Node node);
    }
    
    public class Node {
        private Node left;
        private Node right;
        private final T datum;

        public Node(T datum){
            this.datum = datum;
        }

	public T getDatum(){
	    return datum;
	}

	public String toString(){
	    return logf(datum,left,right);
	}

	public void accept(Visitor v){
	    if(left != null){
		left.accept(v);
	    }
	    v.visit(this);
	    if(right != null){
		right.accept(v);
	    }
	}

	public int size(int start){
	    int inc = start + 1;
	    if(left == null && right == null){
		return inc;
	    }
	    else if(left == null){
		return right.size(inc);
	    }
	    else if(right == null){
		return left.size(inc);
	    }
	    else{
		return left.size(right.size(inc));
	    }
	}

        public void insert(T newDatum){
            if(newDatum == datum){
                return;
            }
            int comparison = newDatum.compareTo(datum);
            if(comparison < 0){
                if(left == null){
                    left = new Node(newDatum);
                }
                else{
                    left.insert(newDatum);
                }
            }
            else{
                if(right == null){
                    right = new Node(newDatum);
                }
                else{
                    right.insert(newDatum);
                }
            }
        }

        public boolean contains(T query){
            if(datum == query){
                return true;
            }
            int comparison = query.compareTo(datum);
            if(comparison < 0){
                if(left == null){
                    return false;
                }
                return left.contains(query);
            }
            else{
                if(right == null){
                    return false;
                }
                return right.contains(query);
            }
        }
    }
}
